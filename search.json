[
  {
    "objectID": "content/508_compliance.html",
    "href": "content/508_compliance.html",
    "title": "508 Compliance",
    "section": "",
    "text": "This is development from notes from a Dec 2021 meeting of the NMFS R User Group.",
    "crumbs": [
      "508 Compliance"
    ]
  },
  {
    "objectID": "content/508_compliance.html#from-past-meetings",
    "href": "content/508_compliance.html#from-past-meetings",
    "title": "508 Compliance",
    "section": "From past meetings:",
    "text": "From past meetings:\n\n2021-12-07\n\nRecording of R UG Meeting",
    "crumbs": [
      "508 Compliance"
    ]
  },
  {
    "objectID": "content/508_compliance.html#requirements",
    "href": "content/508_compliance.html#requirements",
    "title": "508 Compliance",
    "section": "Requirements",
    "text": "Requirements\n\nThe “Big 5” list (“the bare minimum”)\nList from NOAA library that will be used by John DeVore for checking assessment reports submitted to the Pacific Fisheries Management Council:\n\nTagged content: The PDF is a tagged PDF. Auto-tagging is acceptable. If this step is not done, no other elements will pass because they rely on tagging elements. List of Standard PDF tags from Adobe. https://helpx.adobe.com/acrobat/using/editing-document-structure-content-tags.html#standard_pdf_tags\nBookmarks: Bookmarks are present on documents over 20 pages and illustrate the structure of the document. If a Table of Contents is present, bookmarks should reflect this.\n\nAlternative Text: Alt text is present for all figures, charts, maps, equations, etc.\nLogical reading order: The reading order of the elements is logical and follows the flow of the document.\nDocument properties: Title and language are present. These features are metadata, where Adobe provides resources about creating and editing document metadata. https://helpx.adobe.com/acrobat/using/pdf-properties-metadata.html\n\nComprehensive list of features of accessible documents - correct tags to all text elements - structurally correct headings 1-6 - each paragraph is marked as single paragraph - listings marked as (interlaced) lists - table headers defined for data tables - the documents correct reading sequence can be identified - alternative texts is present for charts and images - layout graphics and headers and footers are in the background - document has the correct language assigned - define language changes within the document - bookmarks are available for easier navigation - security settings are defined such that they don’t block assistive technologies, best to not have security at all - field labels for all form fields - internal and external references are defined (clickable links and indexes) - correct assignments of foot notes - reading by means of text flow\n\n\nWhat documents need to be Section 508 compliant?\n\nStock assessment reports (examples here) in PDF format (definitely)\nBackground materials for assessment reviews?\nWebsites\n\nCan be checked using this tool ANDI - Accessibility Testing Tool - Install\nGitHub Issue related to work on getting the r4ss HTML viewer compliant: https://github.com/r4ss/r4ss/issues/411\n\n\n\n\nMore info on alternative text\nHow descriptive should it be? Info on alternative text for complex images https://www.w3.org/WAI/tutorials/images/complex/",
    "crumbs": [
      "508 Compliance"
    ]
  },
  {
    "objectID": "content/508_compliance.html#solutions-and-information",
    "href": "content/508_compliance.html#solutions-and-information",
    "title": "508 Compliance",
    "section": "Solutions and information",
    "text": "Solutions and information\nAssorted links to info online - Tags - Standards for tagging: Implementing PDF standards for Mathematical Publishing: http://web.science.mq.edu.au/~ross/TaggedPDF/PDF-standards-v2.pdf - LaTex packages - tagpdf: https://ctan.org/pkg/tagpdf - Example with make file and pandoc issue talking about trials and tribulations with this method - Example slide deck: https://www.latex-project.org/publications/2019-08-CAR-TUG-tagged-pdf-slides.pdf - pdfx, another LaTex package, used on top of tagpdf with an example here. - Alternative text - knitr: github knitr issue 1879 related to alternative text for figures: https://github.com/yihui/knitr/issues/1879 - Setting Language - from StackExchange\n\nrmarkdown\n\nR Markdown Cookbook (focused on HTML): https://bookdown.org/yihui/rmarkdown-cookbook/html-accessibility.html\npdf engine - lualatex using the following code\npdf_document: latex_engine: xelatex\n\nCheckers\n\n.pdf\n\nAcrobat pro\nPAC 3 - Free PDF Accessibility Checker 3 (2017-12-19) hosted by the Access for all Foundation (Zurich, Switzerland)\nveraPDF\n\n.html (Web Content Accessibility Guidelines)\n\nANDI - Accessibility Testing Tool - Install: https://www.ssa.gov/accessibility/andi/help/install.html\nWAVE: https://wave.webaim.org/extension/",
    "crumbs": [
      "508 Compliance"
    ]
  },
  {
    "objectID": "content/508_compliance.html#resources",
    "href": "content/508_compliance.html#resources",
    "title": "508 Compliance",
    "section": "Resources",
    "text": "Resources\n\ntinytex:https://yihui.org/tinytex/\nBookdown: https://bookdown.org/",
    "crumbs": [
      "508 Compliance"
    ]
  },
  {
    "objectID": "content/508_compliance.html#example-repos",
    "href": "content/508_compliance.html#example-repos",
    "title": "508 Compliance",
    "section": "Example Repos:",
    "text": "Example Repos:\n\nNWFSC:\n\nKelli Johnson, Aaron Berger, Chantel Wetzel, Andi Stephens, and Ian Taylor are all using using markdown, knitr, or latex for stock assessment reports\nErin Steiner automated the creation of Economic Data Reports but now that it’s all online with FISHEyE, had planned to write unformatted tech memos to word and let Al Brown (NWFSC Technical Editor) handle the formatting, but would prefer to use Rd or Rmd. https://www.fisheries.noaa.gov/west-coast/science-data/economic-data-collection-reporting\nNick Tolimeri\n\nSWFSC:\n\nMelissa Monk created the Rmarkdown Stock Assessment Template used and adapted by many of those listed above: https://github.com/melissamonk-NOAA/StockAssessment_template\n\nAFSC:\n\nJim Ianelli is working on this presumably along with the folks to whom he forwarded an email on the subject (including the S&T folks below): Ben Williams, Cole Monnahan, Ingrid Spies\nJosh London with NMML has a package that does some accessibility stuff but not full 508 compliance (https://github.com/jmlondon/uswebr) - will be presented via August 13th FIT meeting (contact Corinne Bassin to attend) S&T National Modeling Team\nChristine Stawitz and Corinne Bassin are thinking about this stuff on a national level and across assessment platforms\n\nWest Coast Region\n\nStacey Miller is coordinator for the Pacific Whiting/Hake treaty and working with Aaron and Kelli (above) and their Canadian counterparts to make all documents posted to the regional website compliant\n\nNEFSC\n\nDan Hennen hired a contractor (Tom Price) to make their reports 508 compliant - sounds like they have a working model and are working on creating a package (pending funding?): https://tug.org/tug2020/preprints/Price-Moore-AccessibleTikZ-slides.pdf\nAndy Beet (EDAB) has been working on making markdown/rmarkdown docs 508 compliant. Focus has been on alt text for images. Many documents (markdown/Rmarkdown) created in EDAB have many images. Converting to word via a reference doc, then to pdf solves the alt text problem (But it’s an ugly process)\n\nOther\n\nRmarkdown/latex combination with source code and data for Bering Sea pollock: https://github.com/afsc-assessments/EBSpollock\nAssessment template (very minimal and I am working on updating it with the latest commits so give me a week) but creates a tagged pdf with alt text github.com/nwfsc-assess/sa4ss",
    "crumbs": [
      "508 Compliance"
    ]
  },
  {
    "objectID": "content/reuse_statement.html",
    "href": "content/reuse_statement.html",
    "title": "Public Domain Work",
    "section": "",
    "text": "This resource book is in the public domain under the Creative Commons v1.0 Universal license. You can copy, modify, and distribute the work, all without asking permission. We encourage you to reuse and rework the material as you see fit."
  },
  {
    "objectID": "content/landing_pages.html",
    "href": "content/landing_pages.html",
    "title": "Landing Pages",
    "section": "",
    "text": "A Readme file at the top of your repo or a landing page helps users navigate your material and creates branding. These are easy to create in GitHub and RStudio has templates for creating navigable webpages of your content. If you have an R package on GitHub, see the wiki page on {pkgdown}.\nFor example, here is what you see at github.com/eeholmes (on Nov 2021). It is a Readme at the top of the profile that directs readers the organizations and repos of this user.\n\n\n\neeholmes Readme\n\n\nYou can also create a landing page. Here is the Fisheries Integrated Toolbox landing page.\n\n\n\nFIT GitHub Page\n\n\nYou also easily make landing pages to navigate through multiple files within a repository. Here is an example:\n\n\n\nRVerse GitHub Page\n\n\n\n\nYou can have a Readme pinned at the top of your GitHub page from a repo in your account with the same name as your account, e.g. github.com/&lt;your-org&gt; or github.com/&lt;your-username&gt;.\n\nYour personal GitHub account: 1. Create a repo called  (so I would create one called eeholmes). 2. In that put Readme.md An example of a README.md file you might like to use for this can be found here.\nYour organization GitHub account: 1. Create a repo called .github (note the “.”). 2. Create a folder in that called profile. 3. In that put Readme.md.\n\n\n\n\nYou can create customized webpage also. It will have the form username.github.io. Example from my accounts: https://eeholmes.github.io/, https://nmfs-openscapes.github.io/template_website_cv/ (repo), and https://nwfsc-math-bio.github.io/\n\nCreate a repo called  or if an organization, . So for me, the repo would be called eeholmes\nIn that put the website files. See below for examples of how to do that or take a look at others’ repos. Just look for the  repo. So if you see, joeblow.github.io, you know that there is a joeblow repo in http://github.com/joeblow and that repo will have the website code.\nGo to GitHub Pages in the Settings tab (scroll way down), and then tell it to look for the website files at the main level or in the docs folder (wherever you put the files).",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#readme.md",
    "href": "content/landing_pages.html#readme.md",
    "title": "Landing Pages",
    "section": "",
    "text": "You can have a Readme pinned at the top of your GitHub page from a repo in your account with the same name as your account, e.g. github.com/&lt;your-org&gt; or github.com/&lt;your-username&gt;.\n\nYour personal GitHub account: 1. Create a repo called  (so I would create one called eeholmes). 2. In that put Readme.md An example of a README.md file you might like to use for this can be found here.\nYour organization GitHub account: 1. Create a repo called .github (note the “.”). 2. Create a folder in that called profile. 3. In that put Readme.md.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#github-pages",
    "href": "content/landing_pages.html#github-pages",
    "title": "Landing Pages",
    "section": "",
    "text": "You can create customized webpage also. It will have the form username.github.io. Example from my accounts: https://eeholmes.github.io/, https://nmfs-openscapes.github.io/template_website_cv/ (repo), and https://nwfsc-math-bio.github.io/\n\nCreate a repo called  or if an organization, . So for me, the repo would be called eeholmes\nIn that put the website files. See below for examples of how to do that or take a look at others’ repos. Just look for the  repo. So if you see, joeblow.github.io, you know that there is a joeblow repo in http://github.com/joeblow and that repo will have the website code.\nGo to GitHub Pages in the Settings tab (scroll way down), and then tell it to look for the website files at the main level or in the docs folder (wherever you put the files).",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#readme.md-1",
    "href": "content/landing_pages.html#readme.md-1",
    "title": "Landing Pages",
    "section": "Readme.md",
    "text": "Readme.md\nA plain Readme.md file in your repo (Readme) is the most common landing page. You can just have user scroll down to the bottom of the repo page to see this (most common approach). You can make Readme files pretty snazzy. Examples here and here.\nBut there are other ways that you can create landing pages that are more customized and complex using GitHub Pages. In this case, the landing page URL will be &lt;username or orgname&gt;.github.io for the org or user and &lt;username or orgname&gt;.github.io\\&lt;reponame&gt; for an individual repo.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#github-pages-from-readme-with-a-theme",
    "href": "content/landing_pages.html#github-pages-from-readme-with-a-theme",
    "title": "Landing Pages",
    "section": "GitHub Pages from Readme with a theme",
    "text": "GitHub Pages from Readme with a theme\nIf you turn on GitHub Pages (click Settings in your repo and scroll down), you can specify that it create a landing page from Readme.md. This is how https://openscapes.github.io/2021-noaa-nmfs/ works. You can add a theme. MARSS looks really different but it is just a simple Readme.md with one of GitHub standard themes applied in GitHub Pages.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#github-pages-from-one-rmd-file",
    "href": "content/landing_pages.html#github-pages-from-one-rmd-file",
    "title": "Landing Pages",
    "section": "GitHub Pages from one Rmd file",
    "text": "GitHub Pages from one Rmd file\nAnother easy way to make a landing page is from a Rmarkdown file named index.Rmd. Whatever look you can get with your Rmarkdown file, you can get for your webpage. Here is an example of just a flat Rmarkdown file with subheadings that produces a very useful landing page for a assessment package ASSESSOR. Note Python users, you could do this with Sphinx too. It’s not Rmarkdown specific.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#github-pages-from-docs-folder",
    "href": "content/landing_pages.html#github-pages-from-docs-folder",
    "title": "Landing Pages",
    "section": "GitHub Pages from docs folder",
    "text": "GitHub Pages from docs folder\nOne of the options in RStudio is to make a website from a collection of Rmarkdown files. This is an easy way to develop a more complex webpage. Here is an example from my R Workflow course RWorkflow 2021. Link to the repo is in the upper left. Here’s another example from one of our speakers: R Workshop For Social Scientists. Building this is just a click of a button in RStudio. You can build whatever website you wanted and put that in the docs folder by the way. Building from Rmarkdown files just means that all you focus on is the the content.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#rstudio-and-distill-webpages",
    "href": "content/landing_pages.html#rstudio-and-distill-webpages",
    "title": "Landing Pages",
    "section": "RStudio and Distill webpages",
    "text": "RStudio and Distill webpages\nMake a webpage from Rmd files is quite easy in RStudio. Just select New Project &gt; Template &gt; Webpage and it’ll start you off with a template. You can make a quite slick webpage by using themes such as provided by the postcards R package. The NASA Openscapes page is an example. The repository for this webpage is here. Once you install the distill package, you’ll see a template for that when you create a new RStudio project.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/landing_pages.html#jekyllhugo-sites",
    "href": "content/landing_pages.html#jekyllhugo-sites",
    "title": "Landing Pages",
    "section": "Jekyll/Hugo sites",
    "text": "Jekyll/Hugo sites\nThese Hugo Academic sites are really common in academia. Here is an example from someone random at Woods Hole. Here’s an older clunkier version using SinglePaged: nwfsc-timeseries. Getting these set up on GitHub can take awhile. Dead simple if you have done it a bunch, but not intuitive in my experience. After playing with Jekyll sites for awhile, I gravitate back to a more simple landing pages based on markdown and Rmarkdown files (latter if I need code).\nNote There seems to be a movement towards creating federal agency websites using GitHub-Jekyll integration. You might want to look at the GSA repo for the Section508.gov website and the Federalist platform which uses GitHub repos as the content for government websites. It’s an effort in government to reduce some of the workload for development of 508 compliant websites. More info here.",
    "crumbs": [
      "Landing Pages"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html",
    "href": "content/best_practices_coding/best_practices_r.html",
    "title": "Best Coding Practices in R",
    "section": "",
    "text": "Best RACE-GAP Coding Practices Prepared by: Caitlin Allen Akselrud - NOAA Federal",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#aims",
    "href": "content/best_practices_coding/best_practices_r.html#aims",
    "title": "Best Coding Practices in R",
    "section": "Aims:",
    "text": "Aims:\n\nTo create and share reproducible, transparent, and transferable code. Specifically:\nTo maintain consistent file structure and coding syntax for ease of sharing and reading code.\nTo have thoroughly documented code, that is understandable by others and reproducible.\nTo implement version control measures and track coding changes.\nTo have others view code for quality control, implementing issue trackers, and correcting issues in a timely manner.\n\nLet go of your entrenched habits in favor of group consistency!",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#standard-file-structure",
    "href": "content/best_practices_coding/best_practices_r.html#standard-file-structure",
    "title": "Best Coding Practices in R",
    "section": "Standard file structure:",
    "text": "Standard file structure:\nThis file structure example is based on R code, and other softwares may have slightly different configurations. At a minimum, your file structure should generally be in keeping with Wilson et al. (2017, see Box 3). For R code and R projects, your file structure should minimally include:\n|- project_name\n|- - project_name.Rproj\n|- - code\n|- - data\n|- - documentation\n|- - figures\n|- - functions\n|- - output\nYou may include subfolders within your folders, such as:\n|- project_name\n|- - data\n|- - - data_raw\nOr add a year folder for annual projects, such as:\n|- project_name\n|- - [year]\n|- - - code\n|- - - [other standard subfolders]\nYou may also wish to add additional folders, such as:\n|- project_name\n|- - presentations\n|- - images\n|- - reports\n|- - paper\n|- - license\n|- - citation\n|- - README\nAn example function for automatically building these folders:\n# here are the names of the file folders you want to create:\ndirs = c(\"code\", \"data\", \"documentation\", \"figures\", \"functions\", \"output\")\nfor(i in 1:length(dirs)){\n  if(dir.exists(dirs[i])==FALSE){\n    dir.create(dirs[i])\n  }\n}",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#structure-and-syntax-of-code",
    "href": "content/best_practices_coding/best_practices_r.html#structure-and-syntax-of-code",
    "title": "Best Coding Practices in R",
    "section": "Structure and syntax of code:",
    "text": "Structure and syntax of code:\nCode header metadata\nEvery .R file should start with a standard header. This header can be a comment in base format (#), in {roxygen} format (#’), or as an RMarkdown comment (— your comments —). You header should include, at a minimum:\n# A short description of what this file is or does\n# Created by: creator name\n# Modified by: modifier name (if applicable)\n# Contact: your@noaa.gov email address\n# Created: date in yyyy-mm-dd format\n# Modified: date in yyyy-mm-dd format",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#dependencies",
    "href": "content/best_practices_coding/best_practices_r.html#dependencies",
    "title": "Best Coding Practices in R",
    "section": "Dependencies",
    "text": "Dependencies\nIt is important to track all packages and package versions used in your code. Current recommendations are to use the {renv} package: https://rstudio.github.io/renv/articles/renv.html\n\nAt the start of a project, run: renv::init()\nDuring a project, run: renv::snapshot()\nWhen reopening the project or opening on a different computer, run: renv::restore()\nYou will need to make sure you have a copy of the .RProfile file and the renv.lock files, and that you share those files when sharing your code with others or between computers.\n\nYou should load all packages and libraries required in your script at the top of your script, not throughout. Naming conventions and coding style All names should be descriptive. Not descriptive: var1, file1.R Better: cpue, cpue_calc.R Best: cpue_kg, cpue_calc_from_raw_data.R\nUse snake_case, all lowercase and spaces replaced with underscores (not periods, and definitely not spaces). * File names * Use snake_case (underscores, not periods, and definitely never spaces): * lowercase_and_underscore.R\nUse YYYY-MM-DD for any dates in file names. It can be helpful to use dates for 1) original data download, 2) files that change (for example, based on code runs), 3) to order items systematically in a folder, or 4) versions of files:\n\norig_data_2020-12-01.csv\nformatted_data_2020-12-02.csv\n2020-12-20_FirstLastName_XYZConf.pptx\n\nUse descriptive names. For example, it is helpful to include datasource_briefdescription_firstyear_lastyear_version_date.csv: * racebt_pollock_2010_2020_v_2020-12-01.csv * Origdata_racebt_pollock_2010_2020_v_2020-12-01.csv\nUse numbers to identify the order items should be in for your fellow human readers. For example, this can be helpful if you and your colleagues expect to find files saved in a predictable order: * 1_intro_map_of_study_area.jpg * 2_intro_map_of_stations_surveyed.jpg * 3_method_net_diagram.jpg\nIt is better to have a longer filename than something nonsensical, nondescript, or only makes sense to you (e.g., pollock20.csv). However, be mindful that it is possible to have file names that are too long and you must balance descriptiveness with succinctness. Some functions in R will require paths or file names to be below a certain character limit (often around 256 characters).\nWhen in doubt, defer to Jenny Bryan: https://speakerdeck.com/jennybc/how-to-name-files * Object names * Short, but descriptive is ideal here. Again, use snake_case (lowercase with underscores between words, and not periods because they can cause problems in certain packages and functions).\nDo not use reserved object and base R function names. Here are some common names that can cause problems: * c: c() is a function for concatenate, so do not use ‘c’ as a parameter or variable name. * T and F: these are boolean TRUE and FALSE, respectively. Note: Use TRUE and FALSE rather than T or F because some functions and packages can be picky and the former are much clearer. * t and f: t() and f() are the functions for t-tests and f-tests(). * plot: plot() is a base R function for creating a plot. A common mistake is to name a plot object ‘plot’. Instead, use something more descriptive (e.g., study_map_plot or figure_*).\nDescriptive: for multiple datasets, use something like: squid_dat or env_dat rather than: dat1 or dat2\nWhen reading in data files, there is a {tidyverse} package to correct names: rename_all(tolower). The {janitor} package is also an excellent and expedient way to convert column names to follow Tidy data conventions.\nNote: for tracking derived versus original data column names, it is best to call in all data being used, keeping all original and raw data in a raw data sub-folder. Then, processed data happens in a separate function and goes into a separate processed data sub-folder.\nSome people use all caps for a parameter that is fixed in the global environment. This is ok, but please define the parameter at the top of the script, and note that it is a fixed value. For example: * SELEX &lt;- 0.5 # selectivity is fixed at 0.5\nSome people prefer to capitalize the first letter of an object when turning something into a factor. This is fine. E.g., age as a continuous variable and Age as a grouped factor for plotting. Function names Use snake_case for function names (lowercase with underscores between words, and not periods because they can cause problems with package functions). descriptive_function_name is great. * Naming the function with an f_ at the start is even better for clarity to other users and can make finding the function easier: f_calc_catchability If using a specific package for a function that may have the same name among packages, the best practice is to use package::function().",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#dates",
    "href": "content/best_practices_coding/best_practices_r.html#dates",
    "title": "Best Coding Practices in R",
    "section": "Dates",
    "text": "Dates\nAlways use the international convention for dates: YYYY-MM-DD. This allows files to be stored and sorted easily, as well as limit confusion on which number is for the year, the month, or the day. Note that if this fill is being written for a single digit month or day, we use a “0” to fill the space (e.g., “2021-01-02”).",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#assignments",
    "href": "content/best_practices_coding/best_practices_r.html#assignments",
    "title": "Best Coding Practices in R",
    "section": "Assignments",
    "text": "Assignments\n\nUse &lt;- instead of = when assigning a data type. Reserve = for use within function designations.\nGood: pop_dy &lt;- f_get_pop(growth_rate = 0.3, carrying_cap = 10000)\nWorks, but is bad practice: pop_dy = f_get_pop(growth_rate = 0.3, carrying_cap = 10000)\nSomeone will cry: x=foo.fxn(r=0.3, K=10000)",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#spaces",
    "href": "content/best_practices_coding/best_practices_r.html#spaces",
    "title": "Best Coding Practices in R",
    "section": "Spaces",
    "text": "Spaces\n\nPlace spaces around all binary operators (=, +, -, &lt;-, etc.).\nDo not place a space before a comma, but always place one after a comma.\nDetailed examples and additional recommendations are available in the tidyverse style guide.",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#r-sections",
    "href": "content/best_practices_coding/best_practices_r.html#r-sections",
    "title": "Best Coding Practices in R",
    "section": "R Sections",
    "text": "R Sections\n\nUse R sections to create outline sections with comments:\nUse Ctrl+Shift+R to create outline sections (e.g., # — your section —).\nUse Ctrl+Shift+O to see the outline of the script. This will help organize the script and make it easy for others to follow the script.\nPlease make a general description of the section such as: “packages”, “load data”, “data processing”, “model”, “results”, “graphics” are all good, short, descriptive names.\nThe developer can always create additional subsections within each section by adding a * before the section name (e.g., # — * your subsection—).\n\nFor example:\n# --- Load Libraries ---\n\n# --- Source Scripts ---\n# --- * Load Data ---\n# --- * Load Functions ---\n\n# --- Preliminary Analysis ---\n\n# --- Model 1 ---\n# --- * Save Results ---\n# --- * Graphs ---",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#starting-a-new-project-with-best-practices",
    "href": "content/best_practices_coding/best_practices_r.html#starting-a-new-project-with-best-practices",
    "title": "Best Coding Practices in R",
    "section": "Starting a new project with best practices:",
    "text": "Starting a new project with best practices:\n\nUse R Projects. R experts keep all the files associated with a project together — input data, R scripts, analytical results, figures. This is such a wise and common practice that RStudio has built-in support for projects.\nUse standard file structure. See the Standard file structures section.\nDo NOT use fixed paths. Refer to the {here} package and use here::here(\"mydir\", \"myfile\") types of file specifications.\nDo NOT save the R environment (reproducible code should run start to end without needing to load the environment).\nInclude a header with developer information at the top of each script. See the Code header section.\nAnnotate code generously for clarity. Add comments to lines for anything that might be tricky, confusing, or where the calculation comes from a specific source or paper.\nInclude all of dependencies\nPlease limit dependencies to packages/libraries actually being use.\nUse R sections. See the R Sections section.\nUse modular coding practices (functions!).\nBuild in regular checks to ensure the script is doing what it is supposed to do {testthat} package: https://testthat.r-lib.org/; https://cran.r-project.org/web/packages/testthat/testthat.pdf\nUse version control.\nUse the tidyverse style guide (or {styler} package), so the code has consistent formatting.\nStrongly preferred practices\nUse Git, GitHub, and/or GitLab for version control; see GitHub use section below.\nWhen prepping a package for distribution, it is up to the author as to what dependencies they wish to include, or if they prefer to work exclusively in base R coding language.\nConverting old code to best practices:\nIf you are converting old code to a new project, please follow the below guidance in addition to the guidance in the Starting a new project with best practices section.\nCreate an R Project (if one does not exist).\nSet up standard file structure (to the extent possible) and organize files into appropriate folders. See the Standard file structures section.\nCorrect any paths that were written to local fixed directories (or “fixed” paths). Refer to the {here} package or getwd().\nInclude your header and dependencies.\nOnly include libraries you actually use.\nCheck the code and note any dependencies that may no longer work, result in errors, or are deprecated (no longer maintained or updated in favor of a newer package). Where possible, replace the use of these packages.\nAdd sections to the code for clarity (to the extent possible). See R sections.\nAdd notes within the code for clarity (to the extent possible).\nFor consistent formatting, select all your code and reformat using Code &gt; Reformat code (or ctrl + shift + a). Or you can run the {styler} package, so your code has consistent formatting with the R Style Guide.\nOld non-R code to new R code\nWhen creating new code based on code written in another language, it’s important to compare results of the new R code with the outputs of the previous code. It is important to test whether the two pieces of code (non-R and R) are producing the same outputs. If not, it is important to understand and document the differences.\nIt is best to create new R code that exactly replicates the original code, and then do updates and corrections to the new code, as needed, documenting where changes have been made.\nMaintaining and sharing code:\nWriting code for other people/computers\nCreate packages for code that are going to consistently be used or may be needed by others.\nWhen writing a code or package for a wide audience/machines, check the code works using a virtual machine, with programs like Docker: https://www.docker.com/.\nAll packages can include the developer’s ORCID ID (https://orcid.org/).\nProvide visual progress updates, so another user knows the code is running properly, even if it takes a long time.\nProgress bar: https://ryouready.wordpress.com/2009/03/16/r-monitor-function-progress-with-a-progress-bar/. print(paste(“some note about code progress”) is also acceptable.\nOptions that rely on the code running on an open computer to execute are not encouraged (e.g., {beepr} package), as they may cause code to error out before completion.\nIf code takes a long time to run, it is helpful to annotate that in the code notes, in the script header, or to print a message to the user during the run.\nTest the functions in the script (http://r-pkgs.had.co.nz/tests.html)",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#r-profile-options",
    "href": "content/best_practices_coding/best_practices_r.html#r-profile-options",
    "title": "Best Coding Practices in R",
    "section": "R profile options",
    "text": "R profile options\n\nCommon example: machine precision settings are changed.\nIf changes are made to the options in profile, it must be specified in the code and documentation.\nBuild in a check to verify the user settings against the needed settings.\nSave a record of what the profile options are.\nIt is recommended to not manually change options and to have the code make changes in the script.",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#data-sharing",
    "href": "content/best_practices_coding/best_practices_r.html#data-sharing",
    "title": "Best Coding Practices in R",
    "section": "Data sharing:",
    "text": "Data sharing:\n\nWe often do not keep copies of raw data on sites like GitHub (too much storage). Instead, please have files in a space that is widely accessible to the group on a shared drive. Specify in the code notes where those files are.\nIf outside collaborators need access for authorized uses, another option is Google Drive (to automate downloads or otherwise access such data from R; see https://googledrive.tidyverse.org/](https://googledrive.tidyverse.org/)). To officially archive data, please see the Archiving section.",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/best_practices_coding/best_practices_r.html#attribution",
    "href": "content/best_practices_coding/best_practices_r.html#attribution",
    "title": "Best Coding Practices in R",
    "section": "Attribution",
    "text": "Attribution\nAdapted from the Best AFSC RACE-GAP Coding Practices Guidelines compiled by Caitlin Allen Akselrud, Emily Markowitz, and others.",
    "crumbs": [
      "Coding Best Practices",
      "Best Coding Practices in R"
    ]
  },
  {
    "objectID": "content/open_science_at_nmfs.html",
    "href": "content/open_science_at_nmfs.html",
    "title": "2023 Year of Open Science",
    "section": "",
    "text": "On January 11, 2023, the White House Office of Science and Technology Policy (OSTP) launched 2023 as the Year of Open Science to advance national open science policies across the federal government: White House Fact Sheet on Year of Open Science. Along with this they created a federal portal for open science research announcements."
  },
  {
    "objectID": "content/open_science_at_nmfs.html#what-is-open-science",
    "href": "content/open_science_at_nmfs.html#what-is-open-science",
    "title": "2023 Year of Open Science",
    "section": "What is Open Science?",
    "text": "What is Open Science?\nHere is the pithy definition that OSTP and the National Science and Technology Council (NSTC) for use across the U.S. government: “The principle and practice of making research products and processes available to all, while respecting diverse cultures, maintaining security and privacy, and fostering collaborations, reproducibility, and equity.”\nHere is the definition from NASA’s Open-Source Science Initiative.\n“Open-source science is a commitment to the open sharing of software, data, and knowledge (algorithms, papers, documents, ancillary information) as early as possible in the scientific process. The principles of open-source science are to make publicly funded scientific research transparent, inclusive, accessible, and reproducible. Advances in technology, including collaborative tools and cloud computing, help enable open-source science, but technology alone is insufficient. Open-source science requires a culture shift to a more inclusive, transparent, and collaborative scientific process, which will increase the pace and quality of scientific progress.”\nSo it is both a principle of sharing openly (data, research, products) but also the work to make the cultural shifts in how we do our research so that it can be inclusive, transparent, reproducible and collaborative."
  },
  {
    "objectID": "content/open_science_at_nmfs.html#open-science-at-nmfs",
    "href": "content/open_science_at_nmfs.html#open-science-at-nmfs",
    "title": "2023 Year of Open Science",
    "section": "Open Science at NMFS",
    "text": "Open Science at NMFS\nNOAA Fisheries has many efforts that fall under the rubric of Open Science. Here are some of them."
  },
  {
    "objectID": "content/code_of_conduct.html",
    "href": "content/code_of_conduct.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "Read about why it is important to have code of conduct for your GitHub organization (and for open source products) and how to manage conduct to support better collaborative communities: Contributor Covenant.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#background",
    "href": "content/code_of_conduct.html#background",
    "title": "Code of Conduct",
    "section": "",
    "text": "Read about why it is important to have code of conduct for your GitHub organization (and for open source products) and how to manage conduct to support better collaborative communities: Contributor Covenant.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#how-to-include-a-code-of-conduct",
    "href": "content/code_of_conduct.html#how-to-include-a-code-of-conduct",
    "title": "Code of Conduct",
    "section": "How to include a code of conduct",
    "text": "How to include a code of conduct\n\nWhere to find\nThe Fisheries Integrated Toolbox has a Code of Conduct in its Resources repo. Copy the contents if you want to use it.\n\n\nFor a GitHub org\nYou can have your code of conduct appear appear qutomatically in the side bar of every repo in your org.\n\nCreate a repo called .github\nWithin this create a folder called .github (yes it’ll be .github/.github)\nWithin the .github folder, create CODE_OF_CONDUCT.md\n\n\n\nFor an individual repo\n\nAdd the file CODE_OF_CONDUCT.md at the base level in your repo. Note, if you did the above for a GitHub org or our personal GitHub account, you don’t need to do for individual repos also.\nYou put this in your repo, here’s an example from the Toolbox.\n\n\n\npkgdown\nIf you are using pkgdown, it should be pretty easy to modify _pkgdown.yml to add a link to the code of conduct.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#our-pledge",
    "href": "content/code_of_conduct.html#our-pledge",
    "title": "Code of Conduct",
    "section": "Our Pledge",
    "text": "Our Pledge\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#our-standards",
    "href": "content/code_of_conduct.html#our-standards",
    "title": "Code of Conduct",
    "section": "Our Standards",
    "text": "Our Standards\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#our-responsibilities",
    "href": "content/code_of_conduct.html#our-responsibilities",
    "title": "Code of Conduct",
    "section": "Our Responsibilities",
    "text": "Our Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#scope",
    "href": "content/code_of_conduct.html#scope",
    "title": "Code of Conduct",
    "section": "Scope",
    "text": "Scope\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#enforcement",
    "href": "content/code_of_conduct.html#enforcement",
    "title": "Code of Conduct",
    "section": "Enforcement",
    "text": "Enforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Further details of specific enforcement policies may be posted separately.",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/code_of_conduct.html#attribution",
    "href": "content/code_of_conduct.html#attribution",
    "title": "Code of Conduct",
    "section": "Attribution",
    "text": "Attribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://contributor-covenant.org/version/1/4",
    "crumbs": [
      "Code of Conduct"
    ]
  },
  {
    "objectID": "content/github/onboarding_tools.html",
    "href": "content/github/onboarding_tools.html",
    "title": "Onboarding Tools",
    "section": "",
    "text": "See the information on the Fisheries Integrated Toolbox Tool Onboarding Procedures",
    "crumbs": [
      "GitHub",
      "Onboarding Tools"
    ]
  },
  {
    "objectID": "content/github/onboarding_tools.html#onboarding",
    "href": "content/github/onboarding_tools.html#onboarding",
    "title": "Onboarding Tools",
    "section": "",
    "text": "See the information on the Fisheries Integrated Toolbox Tool Onboarding Procedures",
    "crumbs": [
      "GitHub",
      "Onboarding Tools"
    ]
  },
  {
    "objectID": "content/github/citation.html",
    "href": "content/github/citation.html",
    "title": "Making repos citeable",
    "section": "",
    "text": "There are a few registered agencies that can register DOIs with DOI.org. The big one for science is DataCite and you can see the organizations and institutions that are members of DataCite. NOAA is a member so if there were a software release program, one could get a DOI through that. That is how some USGS software is released and DOI generated. But Zenodo is probably most common for GitHub products and has GitHub integration now so that archiving and DOI generation can be automated when you create a release on GitHub.\nIf your work is something people cite, like a report or a software package, add a CITATION.md file or add citation information to the Readme.md file. You can create a DOI for software. Not all repositories are things that someone would cite however so this is not something one always adds.",
    "crumbs": [
      "GitHub",
      "Making repos citeable"
    ]
  },
  {
    "objectID": "content/github/citation.html#citation",
    "href": "content/github/citation.html#citation",
    "title": "Making repos citeable",
    "section": "",
    "text": "There are a few registered agencies that can register DOIs with DOI.org. The big one for science is DataCite and you can see the organizations and institutions that are members of DataCite. NOAA is a member so if there were a software release program, one could get a DOI through that. That is how some USGS software is released and DOI generated. But Zenodo is probably most common for GitHub products and has GitHub integration now so that archiving and DOI generation can be automated when you create a release on GitHub.\nIf your work is something people cite, like a report or a software package, add a CITATION.md file or add citation information to the Readme.md file. You can create a DOI for software. Not all repositories are things that someone would cite however so this is not something one always adds.",
    "crumbs": [
      "GitHub",
      "Making repos citeable"
    ]
  },
  {
    "objectID": "content/github/citation.html#examples",
    "href": "content/github/citation.html#examples",
    "title": "Making repos citeable",
    "section": "Examples",
    "text": "Examples\nHere are examples of DOIs created for agency software products\n\nEPA CMAQ creates DOIs for the software releases on Zenodo\nEPA CMAQ creates data DOIs for the CMAQ simulation output on Dataverse\nUSGS releases software and generate DOIs for its software. Example the DOI for groundmotion is generated by USGS Software Releases.\n\n\nZenodo\nA public GitHub repository is an option but not completely ideal as the code may change and GitHub may not be around forever. Therefore, proper archives such as Zenodo (https://zenodo.org/) are preferable.\nNote Zenodo has GitHub integration for archiving your GitHub releases.\n\n\nSocrata\nSocrata also has publicly accessible archived data with a permanent record. You can contact your NOAA database manager to discuss options for archiving additional data.\n\n\nBadges\nHere is examples of code to add to your Readme.md to get the DOI badges. Edit the DOI and svg urls to that for your DOI.\n\nZenodo\n\n [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5213949.svg)](https://doi.org/10.5281/zenodo.5213949)",
    "crumbs": [
      "GitHub",
      "Making repos citeable"
    ]
  },
  {
    "objectID": "content/github/citation.html#derivation-work-and-use",
    "href": "content/github/citation.html#derivation-work-and-use",
    "title": "Making repos citeable",
    "section": "Derivation work and use",
    "text": "Derivation work and use\nIn some cases, you might want to add a statement about “fair use” and “fair attribution” to your repo. That really depends on what the repo is about. I tend to add this when I am sharing teaching material and I want to be clear that it is fine to copy the repo material and re-work it for other uses.",
    "crumbs": [
      "GitHub",
      "Making repos citeable"
    ]
  },
  {
    "objectID": "content/github/best_practices.html",
    "href": "content/github/best_practices.html",
    "title": "Best Practices for GitHub",
    "section": "",
    "text": "You can use “template” repos within GitHub to help make sure each repo has the standard content. See the other wiki pages for links to the elements (such as license).\n\n\n\nReadme file that describes what the repo is\nA statement of how to use the repo. For example, if the repo has releases, how to install or download the latest release.\nA License or public domain statement.\nA NOAA disclaimer.\n\nDepending on the nature of the repo.\n\nA statement on the Readme regarding how to contribute. See below for examples for different types of repos.\nTurn on issues for issues and bug tracking.\n\n\n\n\n\nA .github repo with a profile folder and Readme.md file. This will appear at the top of the organization and describe what the organization is.\nOrganization code of conduct statement. See the wiki chapter for examples.\nLicense and disclaimers\nOrganizational guidelines and contact information. See below for an example.",
    "crumbs": [
      "GitHub",
      "Best Practices for GitHub"
    ]
  },
  {
    "objectID": "content/github/best_practices.html#github-best-practices",
    "href": "content/github/best_practices.html#github-best-practices",
    "title": "Best Practices for GitHub",
    "section": "",
    "text": "You can use “template” repos within GitHub to help make sure each repo has the standard content. See the other wiki pages for links to the elements (such as license).\n\n\n\nReadme file that describes what the repo is\nA statement of how to use the repo. For example, if the repo has releases, how to install or download the latest release.\nA License or public domain statement.\nA NOAA disclaimer.\n\nDepending on the nature of the repo.\n\nA statement on the Readme regarding how to contribute. See below for examples for different types of repos.\nTurn on issues for issues and bug tracking.\n\n\n\n\n\nA .github repo with a profile folder and Readme.md file. This will appear at the top of the organization and describe what the organization is.\nOrganization code of conduct statement. See the wiki chapter for examples.\nLicense and disclaimers\nOrganizational guidelines and contact information. See below for an example.",
    "crumbs": [
      "GitHub",
      "Best Practices for GitHub"
    ]
  },
  {
    "objectID": "content/github/best_practices.html#contributing-to-the-repo",
    "href": "content/github/best_practices.html#contributing-to-the-repo",
    "title": "Best Practices for GitHub",
    "section": "Contributing to the repo",
    "text": "Contributing to the repo\nHere are the typical ways that repo owners convey how people can contribute.\n\nSupply contact information (critical)\nAdd a link to the GitHub repo issues page. This is the most common approach.\nAdd a CONTRIBUTING document to repo. Some groups pin this info in their issues list.\n\nThe Fisheries Integrated Toolbox has a Contributing document in its Resources repo. How to use? You put this file in your repo. Here’s an example from the Toolbox.\nHere is a different example from PacFIN.Utilities PacFIN Convention-for-commit-messages.\nYou might adopt a standard for the regular contributors to a repo. Example, “Submit pull requests rather than commit code directly to the development or main branch. Thus workflow would be: 1. Clone the repo, 2. Work on a branch, 3. Submit a pull request.”\nWhat if the repo is just for you? You should still decide how you will contribute to your own repo. Is it ok to “break” the main branch of the repo? That can’t be answered globally; it depends what the repo is. But your future-self will thank you if you have written this down. Example, “The stable version of the repo is in the releases. The main branch may be broken.” “The main branch is a stable branch. Development is via branches.” “This repo is a sandbox for xyz project (don’t expect anything to work).”\n\nNote I personally do not have detailed info like the Fisheries Integrated Toolbox does on how to use GitHub issues on my big CRAN R package MARSS or any others. I have found that the questions that people post are super helpful to me and to other users, so I don’t want to discourage people from posting questions and I want my responses there on the issue thread. I just add an appropriate label, like question (and bug or enhancement) and then close the issue once the question is resolved.",
    "crumbs": [
      "GitHub",
      "Best Practices for GitHub"
    ]
  },
  {
    "objectID": "content/github/best_practices.html#organization-guidelines",
    "href": "content/github/best_practices.html#organization-guidelines",
    "title": "Best Practices for GitHub",
    "section": "Organization guidelines",
    "text": "Organization guidelines\nWriting down the organizational guidelines is especially important if there are multiple contributors and if the GitHub organization is NOAA branded. Here are some things to consider for your guidelines.\n\nWho can be a part of this org?\n\nWho can add repos? What kind (public versus private)? Examples, “Anyone can add a repository to our shared group page if they are a member of the organization.” “This organization contains repositories developed by the math bio team for workshops on R. Adding repos is limited to the core team.”\nHow can someone ask to become a member? Example, “To become a member of the organization, the developer should contact their supervisor, who should be able to provide the contact information for the page administrator(s).” “To request to become an org member and contribute repos, please contact .”\nContact person for the organization\n\n\n\nContent maintenance and continuity\n\nHow are repositories maintained? Example, “Each package author is responsible for maintaining their own package(s), and responding to issues. Please respond in a timely manner: within 2 weeks (where possible).”\nConsider setting up a org level project to that automatically adds issues as they are entered. This can give you an org level view of repos that have issues that are not being addressed.\nArchiving. When repos are no longer being maintained, how will you indicate that. Example, a “no longer maintained” statement on the Readme and that the repo is for reference purposes.\nRepository releases. Any naming or other conventions you have regarding releases. This is very org and repo specific.\nContinuity 1. If the repo code in the main branch needs to stay functional, discuss guidelines for how to ensure this. Example, “Use branches for development within a code package so the main branch is always a working version.” “Add a statement to the repo Readme with instructions on how to install a release and that the code in the main branch is development and may be broken.”\nContinuity 2. Some critical repos may need continuity/backup plans if the main developer is unavailable.\nContinuity 3. You can set up automatic tests to ensure that commits don’t break the code.",
    "crumbs": [
      "GitHub",
      "Best Practices for GitHub"
    ]
  },
  {
    "objectID": "content/github/best_practices.html#security-and-confidentiality",
    "href": "content/github/best_practices.html#security-and-confidentiality",
    "title": "Best Practices for GitHub",
    "section": "Security and confidentiality",
    "text": "Security and confidentiality\nThe nature of your repos and organizations will dictate your approaches to security and confidentiality.\n\nIf your code uses credentials, you will need a way to ensure that those credentials do not get committed and pushed to GitHub. See the wiki chapter on “keeping secrets secret”.\nIf you are working with data or content that needs to stay confidential, then you will need to come up with strategies to ensure that happens. This is very specific to the nature of your work, repos and organizations. Here are some ideas.\n\nLimiting ability to make pushes to a repo. You can set up your org so that contributors have to submit pull requests.\nYou can write a GitHub Action to scan a commit for dangerous content and reject the commit if it is there.\nYou can use the Teams feature to limit which org members can access which repos.\nYou can set up a GitHub to require review of all code/data pushes.",
    "crumbs": [
      "GitHub",
      "Best Practices for GitHub"
    ]
  },
  {
    "objectID": "content/github/best_practices.html#attribution",
    "href": "content/github/best_practices.html#attribution",
    "title": "Best Practices for GitHub",
    "section": "Attribution",
    "text": "Attribution\nAdapted from the Best AFSC RACE-GAP Coding Practices Guidelines compiled by Caitlin Allen Akselrud, Emily Markowitz, and others.",
    "crumbs": [
      "GitHub",
      "Best Practices for GitHub"
    ]
  },
  {
    "objectID": "content/github/secrets.html",
    "href": "content/github/secrets.html",
    "title": "Keeping Secrets Secret",
    "section": "",
    "text": "This example is curtesy of Adyan Rios from the SEDAR team!\nNEVER hard code any usernames and password login information in the code Use another application when possible (e.g., getPass or api or rstudioapi).",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#what-are-some-examples-of-sensitive-information-in-your-r-code",
    "href": "content/github/secrets.html#what-are-some-examples-of-sensitive-information-in-your-r-code",
    "title": "Keeping Secrets Secret",
    "section": "What are some examples of sensitive information in your R code?",
    "text": "What are some examples of sensitive information in your R code?\n\nDatabase links\nDatabase username and passwords\nAWS credentials",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#example-1---using-dotenv-to-hide-internal-database-links",
    "href": "content/github/secrets.html#example-1---using-dotenv-to-hide-internal-database-links",
    "title": "Keeping Secrets Secret",
    "section": "Example 1 - Using {dotenv} to hide internal database links:",
    "text": "Example 1 - Using {dotenv} to hide internal database links:\n\nThis method provides a simple solution for teams that need to share access information internally but that information should not be committed to the repository.\nLearn more here\nPractice:\n\nCreate a project\nCreate a .env file defining visible public names for each sensitive piece of information\n\nEx. Visible_Public_Name = “hidden information”\nAdd a blank line at the end of this file. If not, R will have an issue processing it.\n\nMake sure the .env file is not committed to the repository by adding ’*.env’ to a new line in the .gitignore file in your project folder.\nAfter installing and loading the package, ensure your .env file has the correct file type and is in the correct working directory (in the project’s top level folder, or root directory).\nLoad hidden sensitive information stored in .env file using load_dot_env(.env)\nBring your hidden sensitive information into your global environment using Sys.getenv(\"Visible_Public_Name\")",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#example-2---using-keyring-to-hide-personal-user-names-and-passwords",
    "href": "content/github/secrets.html#example-2---using-keyring-to-hide-personal-user-names-and-passwords",
    "title": "Keeping Secrets Secret",
    "section": "Example 2 - Using {keyring} to hide personal user names and passwords:",
    "text": "Example 2 - Using {keyring} to hide personal user names and passwords:\n\nThis method is suited for storing personal information that individuals on a team use to access their respective databases\n“Each keyring can contain one or many secrets (keys). A key is defined by a service name and a password. Once a key is defined, it persists in the keyring store of the operating system. This means the keys persist beyond the termination of and R session. Specifically, you can define a key once, and then read the key value in completely independent R sessions… Note that all platforms have a default keyring, and key_get(), etc. will use that automatically.” keyring help files\nPractice:\n\nAfter installing and loading the package, store your username with password using key_set_with_value()\nBring your username and password into your code as needed with key_list() and key_get()\n\nkey_list() will show list of the services and usernames you have saved\nkey_list(\"test service\")$username will give you just the username\nget_key(\"test service\", \"test username\") will provide the password associated with a given service and username\n\n\n\nkey_set_with_value(service = \"test service\", \n                   username = \"test username\",\n                   password = \"test password\")",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#be-careful-with-your-commits",
    "href": "content/github/secrets.html#be-careful-with-your-commits",
    "title": "Keeping Secrets Secret",
    "section": "Be careful with your commits",
    "text": "Be careful with your commits\n\nNote that when you make a repository public, the history of commits will be visible to the public\n\nWhen a project is ready to go public, consider scanning the historical commits for links, names, or passwords. Alternatively, start a new repo with the files that you are sure do not have user links, names, or passwords.\n\nPractice using dotenv and keyring. The chance of sharing unintended information will be decreased once these tools are part of our respective workflows.\n\n\nThe information above was inspired by the following:\n\nUsing dotenv to Hide Sensitive Information in R\nDatabases using R - Securing Credentials",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#aws",
    "href": "content/github/secrets.html#aws",
    "title": "Keeping Secrets Secret",
    "section": "AWS",
    "text": "AWS\n\nSee git-secrets for ensuring that you don’t commit AWS credentials to a Git repo.",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#secrets-in-code",
    "href": "content/github/secrets.html#secrets-in-code",
    "title": "Keeping Secrets Secret",
    "section": "Secrets in code",
    "text": "Secrets in code\n\nIf you find yourself in a situation, where you need to have credentials in code, don’t put that code in a local repository (connected to GitHub). Instead, source() a script from outside of the local repo that contains the credentials. This will ensure that it is never saved with the content for sharing with GitHub and will make it easy to systematically update passwords and usernames as needed.",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/github/secrets.html#attribution",
    "href": "content/github/secrets.html#attribution",
    "title": "Keeping Secrets Secret",
    "section": "Attribution",
    "text": "Attribution\nAdapted from material compiled by Adyan Rios from the SEDAR.",
    "crumbs": [
      "GitHub",
      "Keeping Secrets Secret"
    ]
  },
  {
    "objectID": "content/project_management/github_project_boards.html",
    "href": "content/project_management/github_project_boards.html",
    "title": "GitHub Project Boards",
    "section": "",
    "text": "GitHub Project Boards are a powerful way to do project management and tracking. Note that a board can be individual, organization or repository specific. This allows boards to combine issues and tasks across multiple repositories. Also boards are often used for notes and checklists.\n\nCybersecurity and Infrastructure Security Agency. The CISA project boards all use the automated Kanban template with to do, in progress, review, review completed, and done columns.\n\nThis shows one of their semi-automated Kanban boards. They have some cards that are manually added with checklists or notes and others that are being added automatically when they are posted as issues to certain repositories. Example 1\n\nEli Holmes/NWFSC project boards for repo and larger project management. Click “issues” in the organization table\nUSGS groundmotion project board. This one seems to be manual rather than automated but has heavy use of labels on the issues for organization.\nNOAA-EDAB project boards to plan regular workflow meetings at NEFSC",
    "crumbs": [
      "Project Management",
      "GitHub Project Boards"
    ]
  },
  {
    "objectID": "content/project_management/github_project_boards.html#project-boards",
    "href": "content/project_management/github_project_boards.html#project-boards",
    "title": "GitHub Project Boards",
    "section": "",
    "text": "GitHub Project Boards are a powerful way to do project management and tracking. Note that a board can be individual, organization or repository specific. This allows boards to combine issues and tasks across multiple repositories. Also boards are often used for notes and checklists.\n\nCybersecurity and Infrastructure Security Agency. The CISA project boards all use the automated Kanban template with to do, in progress, review, review completed, and done columns.\n\nThis shows one of their semi-automated Kanban boards. They have some cards that are manually added with checklists or notes and others that are being added automatically when they are posted as issues to certain repositories. Example 1\n\nEli Holmes/NWFSC project boards for repo and larger project management. Click “issues” in the organization table\nUSGS groundmotion project board. This one seems to be manual rather than automated but has heavy use of labels on the issues for organization.\nNOAA-EDAB project boards to plan regular workflow meetings at NEFSC",
    "crumbs": [
      "Project Management",
      "GitHub Project Boards"
    ]
  },
  {
    "objectID": "content/project_management/github_project_boards.html#gallery",
    "href": "content/project_management/github_project_boards.html#gallery",
    "title": "GitHub Project Boards",
    "section": "Gallery",
    "text": "Gallery\nExamples of Project Boards for different purposes\n\nNOAA NEFSC EDAB NEFSC\nRepository-level project board to plan regular meetings about code/data workflows \n\n\nNOAA NWFSC Ocean Acidification Lab\nView of NOAA NWFSC Ocean Acidification GitHub Organization\nTeam Overview, including the Exoskeleton Teams\n\n\n\nNOAA NWFSC Ocean Acidification GitHub Teams Overview\n\n\nProject Board View of the Exoskeleton project\n\n\n\nNOAA NWFSC Ocean Acidification GitHub Project Board View of the Exoskeleton project\n\n\nProject Board Table View of the Exoskeleton project (GitHub Projects(beta))\n\n\n\nNOAA NWFSC Ocean Acidification GitHub Project Board Table View\n\n\n\n\nOpenscapes\nOrganization-level project board with issues from public and private repos. Used for mostly non-coding to do’s, with some coding to do’s as well.",
    "crumbs": [
      "Project Management",
      "GitHub Project Boards"
    ]
  },
  {
    "objectID": "content/culture.html",
    "href": "content/culture.html",
    "title": "Culture and Philosophy",
    "section": "",
    "text": "We approach our science with a common denominator of kindness. As part of our core culture, we want this nmfs-openscapes platform to be a place where anyone can engage, learn from and with others, and ask for support.\nAsk for help, and share your learning: We are all learners, and most of our learning is done from each other. It is inefficient to struggle through problems alone. Ask for and give assistance with appropriate cognizance of the value of your time and the time of the person you are asking. You are not the first or last person to encounter a problem. When you identify a problem add an issue to the lab issues repository, and update it with solutions when it is resolved. Also consider writing a tutorial/blog post for inclusion in our shared resources, and share with the larger community by tweeting, leading and sharing at a lab meeting, or running a workshop.\nMake yourself available: Be responsive to communication, and make time for things that address longer term goals, even when busy. Note that being available does not mean that you are available 24/7 - this is not expected. Because as a group we value the role of collaboration and interaction in improving our work, it is expected that you be available in the lab/office during normal business hours for some time during the week.\nCome prepared and be engaged: Value your time. Be present during lab and individual meetings, and come to your work ready to do your work. Contribute and participate in planning and lab discussions. When it is your turn to run a meeting, come with an agenda and be prepared with questions. Aim to view meetings as events that contribute to your work and productivity, rather than taking away from them.\nCelebrate accomplishments (yours & others): You and your colleagues work hard. Things don’t always go exactly as you plan. Be supportive and proud of yourself and your peers when you accomplish things. We are not competing with each other - someone else’s success does not mean your failure. Share your accomplishments with others!\nSustain a positive, safe learning environment: Everyone learns something for the first time at some time, and people learn in different ways. Expressing that you don’t know something is OK, and we understand that this can make someone feel vulnerable. We strive to maintain a culture that allows for and encourages this vulnerability. Community members should not be disparaged for not knowing things, and in addition, should not be disparaged for knowing things or wanting to learn.\nHave an interdisciplinary (open) mindset: We apply our work at the science-policy interface. This means we work on problems that span multiple disciplines. Co-creation of knowledge requires transdisciplinary approaches that can result in solutions that would not be possible with siloing. You will be collaborating with others who have different types of expertise, values, and terminology. Trust the expertise of others and actively seek feedback recognizing the importance of specialization.\nBe mindful and aware of your own biases: We all have biases that are inherent and can not be removed, but we can still work on both being less biased, and more aware of bias in ourselves and others. Periodically check in on your biases.\nPlan with intention, and follow through: Be organized and adaptable. Things don’t always go as planned and that’s OK. Planning can help you adapt when they don’t (see Come Prepared). Find a program/project management approach that works for you; being organized can reduce stress immensely and help you progress with your goals.\nFoster inclusivity within our group and greater community: Part of our lab culture is that we are good citizens of our community, we take on leadership roles within NMFS and NOAA, we are supportive of others in our community during their milestones, we actively participate in NMFS events and perform outreach. Work to craft your individual mentoring/development plans to identify what you want to aim your efforts at.\nPromote and sustain healthy work-life integration: Our scientific research is not the only important thing in our lives, and publishing research is not the only mechanism by which to provide science and support our communities. We recognize the importance of our other commitments in keeping us healthy (mentally and physically) and bring our whole selves to our efforts. Try not to normalize overwork or being busy as achievement or status.\nPractice radical candor: We care personally while also challenging directly. Be honest when communicating, accept critical (but kind) feedback, and give the same to others. View relationships within the group as collaborative rather than evaluative. Don’t take constructive criticism personally.\nAcknowledge and give credit: Working as part of a team, we will often (always?) be building on work done by others, receive assistance with work, and using others’ words, code, content. Include acknowledgement and give credit for those contributions, in all forms of communication. We share content and code within the group with this expectation. One easy approach is to include hyperlinks to the work of others or their social media in your work. This also helps to amplify their voice and work as well as yours.\n\nAttribution\nhttps://thefaylab.github.io/lab-manual/culture.html",
    "crumbs": [
      "Culture and Philosophy"
    ]
  },
  {
    "objectID": "content/licenses_gov.html",
    "href": "content/licenses_gov.html",
    "title": "Licenses for Government Work",
    "section": "",
    "text": "Work produced by federal staff is required to be released under an open license.\n\nData, publications and content: Use the CC0 license\nCode: Use an official open source license plus add the LICENSE addendum file and the disclaimer file\nHow? See details below.\n\n\n\n\nWork of the United States government that is done by US federal employees as part of their official duties is generally in the public domain within the United States of America. That means it cannot be copyrighted. The relevant law is here. Code, data and other content developed by US federal employees should have a notice that the work is in the public domain with an Open license or dedication.\n\n\n\nFor data, publications and content Creative Commons license (CC0-1.0) is the recommended license. CC0-1.0 is a very broad declaration of public domain. See the\nHow do you specify the license?\nIt depends how you release the data. In many cases, a statement regarding that the data are released under CC0 is all that is used. This link will help you with the process.\n\nIf the data are in a GitHub repo, then you can choose a LICENSE by adding a LICENSE file and GitHub will prompt you through the process.\nIf the data but if you are using a data repository service, there will be a question regarding license.\nIf the data are in a R data package, License: CC0 in your DESCRIPTION file.\n\n\n\n\nThere are some special considerations for licenses for open source software: Do not use CC0 for software even though you will see it commonly used on GitHub. Although NOAA has not yet issued its guidelines regarding what open source license to use, it will definitely not be CC0. The CC0 website does not recommend the license for software, but instead recommends using an open source license designed for software. If you want to publish your tool in the Journal of Open Source Software, for example, CC0 is not acceptable because it is not one of the listed open source licenses on the Open Source Initiative.\nThere are two general categories of open source licenses: permissive and restrictive. See this for a nice review of the two types. An example of a restrictive license is GPL-3 because it is strong copy-left; if you use the code in something else, the new code must also be licensed with GPL-3 and the derivative product must also be open source (so cannot be used in proprietary closed-source software). An example of permissive licenses are Apache 2.0 (commonly used by NASA for its open source software) and MIT. For these, the derivative product does not have to be open source so can be used in proprietary software. What license should you use? NOAA has not issued guidelines yet. NASA requires a permissive open source license and Apache 2.0 is commonly used for their code. Generally if you choose one of these, you should be good: Apache 2.0 (not copyleft so can be used in proprietary software), MIT (not copyleft so can be used in proprietary software), or GPL-3 (strong copyleft so cannot be used in proprietary software). But other permissive open source software licenses are probably fine too.\n*Additional License information\nIn addition to one of the standard licenses above we also add the following addendum to our code products:\nSoftware code created by U.S. Government employees is not subject to\ncopyright in the United States (17 U.S.C. §105). The United State\ns/Department of Commerce reserve all rights to seek and obtain copyright\nprotection in countries other than the United States for Software authored\nin its entirety by the Department of Commerce. To this end, the Department\nof Commerce hereby grants to Recipient a royalty-free, nonexclusive license\nto use, copy, and create derivative works of the Software outside of the\nUnited States.\nAdditional disclaimer\nBesides the license, code from federal agencies should also have a disclaimer that the code is ‘as is’ and the user assumes responsibility for its use. Here is a standard disclaimer tailored for a repository on GitHub. See the Fisheries Integrated Toolbox Disclaimer for slightly modified example.\nThis repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an 'as is' basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by Department of Commerce or the United States Government.\n\n\n\nAt the base level of your package, add a LICENSE text file which will list the license plus the addendum above. For example, here is an example of the LICENSE file for the MARSS package.\n\nThe MARSS package as a whole is distributed under GPL-3 (GNU GENERAL PUBLIC\nLICENSE version 3).\n\nIn addition this software has the following license addendum:\n\nSoftware code created by U.S. Government employees is not subject to\ncopyright in the United States (17 U.S.C. §105). The United State\ns/Department of Commerce reserve all rights to seek and obtain copyright\nprotection in countries other than the United States for Software authored\nin its entirety by the Department of Commerce. To this end, the Department\nof Commerce hereby grants to Recipient a royalty-free, nonexclusive license\nto use, copy, and create derivative works of the Software outside of the\nUnited States.\n\nWith the following disclaimer:\n\nThis package is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA code is provided on an 'as is' basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this package will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by the Department of Commerce or the United States Government.\n\nThen in your DESCRIPTION file, put the line (Read more here)\n\nLicense: GPL-3 + file LICENSE\nReplace “GPL-3” with the license you are using.\n\n\n\nAdd this to the bottom of your README file in your GitHub repository. Example: MARSS package README.\n### License\n\nThe MARSS package as a whole is distributed under GPL-3 (GNU GENERAL PUBLIC\nLICENSE version 3).\n\nIn addition this software has the following license addendum:\n\nSoftware code created by U.S. Government employees is not subject to\ncopyright in the United States (17 U.S.C. §105). The United State\ns/Department of Commerce reserve all rights to seek and obtain copyright\nprotection in countries other than the United States for Software authored\nin its entirety by the Department of Commerce. To this end, the Department\nof Commerce hereby grants to Recipient a royalty-free, nonexclusive license\nto use, copy, and create derivative works of the Software outside of the\nUnited States.\n\n### NOAA Disclaimer\n\nThis repository is a scientific product and is not official communication of the National Oceanic and\nAtmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is\nprovided on an ‘as is’ basis and the user assumes responsibility for its use. Any claims against the Department of\nCommerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed\nby all applicable Federal law. Any reference to specific commercial products, processes, or services by service\nmark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or\nfavoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a\nDOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by\nDOC or the United States Government.",
    "crumbs": [
      "Licenses for Government Work"
    ]
  },
  {
    "objectID": "content/licenses_gov.html#licenses",
    "href": "content/licenses_gov.html#licenses",
    "title": "Licenses for Government Work",
    "section": "",
    "text": "Work produced by federal staff is required to be released under an open license.\n\nData, publications and content: Use the CC0 license\nCode: Use an official open source license plus add the LICENSE addendum file and the disclaimer file\nHow? See details below.\n\n\n\n\nWork of the United States government that is done by US federal employees as part of their official duties is generally in the public domain within the United States of America. That means it cannot be copyrighted. The relevant law is here. Code, data and other content developed by US federal employees should have a notice that the work is in the public domain with an Open license or dedication.\n\n\n\nFor data, publications and content Creative Commons license (CC0-1.0) is the recommended license. CC0-1.0 is a very broad declaration of public domain. See the\nHow do you specify the license?\nIt depends how you release the data. In many cases, a statement regarding that the data are released under CC0 is all that is used. This link will help you with the process.\n\nIf the data are in a GitHub repo, then you can choose a LICENSE by adding a LICENSE file and GitHub will prompt you through the process.\nIf the data but if you are using a data repository service, there will be a question regarding license.\nIf the data are in a R data package, License: CC0 in your DESCRIPTION file.\n\n\n\n\nThere are some special considerations for licenses for open source software: Do not use CC0 for software even though you will see it commonly used on GitHub. Although NOAA has not yet issued its guidelines regarding what open source license to use, it will definitely not be CC0. The CC0 website does not recommend the license for software, but instead recommends using an open source license designed for software. If you want to publish your tool in the Journal of Open Source Software, for example, CC0 is not acceptable because it is not one of the listed open source licenses on the Open Source Initiative.\nThere are two general categories of open source licenses: permissive and restrictive. See this for a nice review of the two types. An example of a restrictive license is GPL-3 because it is strong copy-left; if you use the code in something else, the new code must also be licensed with GPL-3 and the derivative product must also be open source (so cannot be used in proprietary closed-source software). An example of permissive licenses are Apache 2.0 (commonly used by NASA for its open source software) and MIT. For these, the derivative product does not have to be open source so can be used in proprietary software. What license should you use? NOAA has not issued guidelines yet. NASA requires a permissive open source license and Apache 2.0 is commonly used for their code. Generally if you choose one of these, you should be good: Apache 2.0 (not copyleft so can be used in proprietary software), MIT (not copyleft so can be used in proprietary software), or GPL-3 (strong copyleft so cannot be used in proprietary software). But other permissive open source software licenses are probably fine too.\n*Additional License information\nIn addition to one of the standard licenses above we also add the following addendum to our code products:\nSoftware code created by U.S. Government employees is not subject to\ncopyright in the United States (17 U.S.C. §105). The United State\ns/Department of Commerce reserve all rights to seek and obtain copyright\nprotection in countries other than the United States for Software authored\nin its entirety by the Department of Commerce. To this end, the Department\nof Commerce hereby grants to Recipient a royalty-free, nonexclusive license\nto use, copy, and create derivative works of the Software outside of the\nUnited States.\nAdditional disclaimer\nBesides the license, code from federal agencies should also have a disclaimer that the code is ‘as is’ and the user assumes responsibility for its use. Here is a standard disclaimer tailored for a repository on GitHub. See the Fisheries Integrated Toolbox Disclaimer for slightly modified example.\nThis repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an 'as is' basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by Department of Commerce or the United States Government.\n\n\n\nAt the base level of your package, add a LICENSE text file which will list the license plus the addendum above. For example, here is an example of the LICENSE file for the MARSS package.\n\nThe MARSS package as a whole is distributed under GPL-3 (GNU GENERAL PUBLIC\nLICENSE version 3).\n\nIn addition this software has the following license addendum:\n\nSoftware code created by U.S. Government employees is not subject to\ncopyright in the United States (17 U.S.C. §105). The United State\ns/Department of Commerce reserve all rights to seek and obtain copyright\nprotection in countries other than the United States for Software authored\nin its entirety by the Department of Commerce. To this end, the Department\nof Commerce hereby grants to Recipient a royalty-free, nonexclusive license\nto use, copy, and create derivative works of the Software outside of the\nUnited States.\n\nWith the following disclaimer:\n\nThis package is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA code is provided on an 'as is' basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this package will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by the Department of Commerce or the United States Government.\n\nThen in your DESCRIPTION file, put the line (Read more here)\n\nLicense: GPL-3 + file LICENSE\nReplace “GPL-3” with the license you are using.\n\n\n\nAdd this to the bottom of your README file in your GitHub repository. Example: MARSS package README.\n### License\n\nThe MARSS package as a whole is distributed under GPL-3 (GNU GENERAL PUBLIC\nLICENSE version 3).\n\nIn addition this software has the following license addendum:\n\nSoftware code created by U.S. Government employees is not subject to\ncopyright in the United States (17 U.S.C. §105). The United State\ns/Department of Commerce reserve all rights to seek and obtain copyright\nprotection in countries other than the United States for Software authored\nin its entirety by the Department of Commerce. To this end, the Department\nof Commerce hereby grants to Recipient a royalty-free, nonexclusive license\nto use, copy, and create derivative works of the Software outside of the\nUnited States.\n\n### NOAA Disclaimer\n\nThis repository is a scientific product and is not official communication of the National Oceanic and\nAtmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is\nprovided on an ‘as is’ basis and the user assumes responsibility for its use. Any claims against the Department of\nCommerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed\nby all applicable Federal law. Any reference to specific commercial products, processes, or services by service\nmark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or\nfavoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a\nDOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by\nDOC or the United States Government.",
    "crumbs": [
      "Licenses for Government Work"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Resource Book",
    "section": "Contributing",
    "text": "Contributing\nPlease submit a pull request.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#attribution",
    "href": "index.html#attribution",
    "title": "Resource Book",
    "section": "Attribution",
    "text": "Attribution\nEditors: Eli Holmes and Emily Markowitz.\nSource material:\n\nEli Holmes (personal content)\nEmily Markowitz (personal content)\nFisheries Integrated Toolbox resources content developed by Kathryn Doering, Christine Stawitz, Bai Li\nBest AFSC RACE-GAP Coding Practices Guidelines content developed by Caitlin Allen Akselrud, Emily Markowitz, Megsie Siple, Cole Monnahan\nsection on GitHub secrets by Adyan Rios",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Resource Book",
    "section": "License",
    "text": "License\nAs a work by US federal employees as part of their official duties, this project is in the public domain within the United States of America. Additionally, we waive copyright and related rights in the work worldwide through the CC0 1.0 Universal public domain dedication.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#noaa-disclaimer",
    "href": "index.html#noaa-disclaimer",
    "title": "Resource Book",
    "section": "NOAA Disclaimer",
    "text": "NOAA Disclaimer\nThis repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an ‘as is’ basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "content/github_in_gov.html",
    "href": "content/github_in_gov.html",
    "title": "GitHub in Government",
    "section": "",
    "text": "GitHub has been used by government agencies and staff for many years; some agencies more (GSA) and other are more newcomers. But recently there has been a bigger shift to using GitHub, not just for code and project tracking but also as an application or website delivery platform. How agencies, organizations, teams and individuals organize their GitHub projects is evolving. Currently (Sept 2021) the following is roughly how things are organized in NOAA. We now have the NMFS GitHub Guide as a resource.",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/github_in_gov.html#version-control-generally-speaking",
    "href": "content/github_in_gov.html#version-control-generally-speaking",
    "title": "GitHub in Government",
    "section": "Version control, Generally Speaking",
    "text": "Version control, Generally Speaking\nThere are several methods for version controlling code. The user can version control content on a local machine through Git, manage content versions on GitHub, and many other places. GitHub is strongly preferred. Sharing through other methods is fine, but it becomes harder to track versions and maintain version control.\n\nStrongly preferred: GitHub\nThere are a variety of public and free options for collaboration with Git. Github is recommended over GitLab an dBitbucket as NOAA has set up rules regarding its use. See the GitHub resources folder for GitHub use and rules at NOAA, and see additional GitHub best practices below. NOAA does have some internal resources for collaborative Git platforms including VLAB and Gitlab. NOAA GitLab may be used only if necessary and there are no plans to include non-NOAA collaborators. VLAB is available for non NOAA users by invite only.",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/github_in_gov.html#terms",
    "href": "content/github_in_gov.html#terms",
    "title": "GitHub in Government",
    "section": "Terms",
    "text": "Terms\nProduct = software (like R package, say, or Python package), a dataset or database, a report with all the various pieces (data, code, text), a report template, a collection of scripts for some task, an application like an API or mobile app.\nRepository = GitHub repository that may or may not be a product. Repository is like a folder on your computer. It is an organizational component but not necessarily, and actually often not, a product. Along with the repository comes important management tools at the repo level: issues tracking, project boards, releases, landing page, automation of tasks.\nOrganization = A collection of related repositories (products or not) AND the organization-level project management tools associated with those (project boards, team discussions, landing page). Anyone can create a GH organization. Think of it like a collection of folders on your computer. Individuals can use these or teams, e.g. Eli has 3 individual GH orgs for different projects, 3 team orgs for team projects and is a member of a few branded GH organizations.",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/github_in_gov.html#licenses-and-disclaimers",
    "href": "content/github_in_gov.html#licenses-and-disclaimers",
    "title": "GitHub in Government",
    "section": "Licenses and Disclaimers",
    "text": "Licenses and Disclaimers\nSee chapter on licenses and disclaimers for government work.",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/github_in_gov.html#github-in-nmfs",
    "href": "content/github_in_gov.html#github-in-nmfs",
    "title": "GitHub in Government",
    "section": "GitHub in NMFS",
    "text": "GitHub in NMFS\nA selection of GitHub organization for NOAA Fisheries. Note many NMFS staff also use GitHub via their personal (work) accounts.\n\nNOAA Fisheries Integrated Toolbox is a cross-center group that has been working for a number of years to provide a branded GH organization for NMFS public GH products and resources, training and tools for creating products. The resources are in the left nav bar on that page, so scroll down.\nFish and Fisheries Tools is an example of a branded set of GH hosted NMFS tools. The GitHub org with a resource folder for common elements and organization.\nNOAA Fisheries Integrated Modeling System FIMS\nAutomation Products for IEA Automation Products for Integrated Ecological Assessments\nPacific Fisheries Management Council assessments NWFSC and SWFSC org related to groundfish assessments and data\nPacific Hake Assessments\nNMFS Stock Synthesis r4ss ss3sim\nEcosystem State\nFuture Seas\nNWFSC: FRAM, FEAT, CB, CB Math Biology, CB Math Bio time series, CB OA Lab, TIDE, RVerse Tutorials\nNEFSC: NEFSC, Ecosystem Dynamics and Assessment Branch\nPIFSC: PIFSC, PIFSC Stock Assessments\nAFSC: AFSC assessments, NMML, AFSC Gap Products, AFSC Ecofoci, Alaska Groundfish EFH\nSEFSC: SEFSC\nSWFSC: SWFSC, US AMLR\nGARFO: GARFO",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/github_in_gov.html#github-in-noaa",
    "href": "content/github_in_gov.html#github-in-noaa",
    "title": "GitHub in Government",
    "section": "GitHub in NOAA",
    "text": "GitHub in NOAA\nBe aware that this structure is evolving. NOAA doesn’t have a single organization site for official products.\n\nNOAA is a branded GH org that has links to other NOAA-affiliated GitHub orgs.\nGeophysical Fluid Dynamics Laboratory\nNOAA https://github.com/ioos\nAOML Omics\nGreat Lakes Environmental Research Laboratory (GLERL)\nPacific Marine Environmental Laboratory",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/github_in_gov.html#github-in-other-agencies",
    "href": "content/github_in_gov.html#github-in-other-agencies",
    "title": "GitHub in Government",
    "section": "GitHub in other agencies",
    "text": "GitHub in other agencies\n\nUS Geological Survey, USGS Astrogeology Science Center, USGS R, USGS Web Informatics\nCensus Bureau\nNASA, NASA Jet Propulsion Lab, NASA Global Imagery Browse Services, NASA WorldWind, NASA-DEVELOP, MCL Consortium, Planetary Data System Software, NASA-IMPACT\nU.S. General Services Administration has close to 900 repos on its org.\nCybersecurity and Infrastructure Security Agency\nEnvironmental Protection Agency\nDepartment of Labor\nDepartment of Energy Earth System Grid Federation, CROCUS, E3SM Project, Land Ice Verification and Validation toolkit, MPAS-Dev\nNational Institutes of Health Early Detection Research Network\nCongressional Budget Office\nUS Forest Service\nThe US Department of Education’s College Scorecard is all open source and on GitHub. Note, this was an early open-source in government project and is not on the USED GitHub organization (which is minimal) but on the contractor’s GitHub organization, RTI International.\nUSDA\nVeterans Affairs. In 2021, they transitioned their whole dev team to GitHub. news story\nNational Parks Service\nUS Bureau of Reclamation\nSee also this list by GitHub. Scroll down to the bottom for the US Research Labs. GitHub in Government",
    "crumbs": [
      "GitHub",
      "GitHub in Government"
    ]
  },
  {
    "objectID": "content/resources.html",
    "href": "content/resources.html",
    "title": "Resources",
    "section": "",
    "text": "See the chapter on GitHub in Government.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "content/resources.html#nmfs-gh-organizations",
    "href": "content/resources.html#nmfs-gh-organizations",
    "title": "Resources",
    "section": "",
    "text": "See the chapter on GitHub in Government.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "content/resources.html#training-materials",
    "href": "content/resources.html#training-materials",
    "title": "Resources",
    "section": "Training materials",
    "text": "Training materials\nSee the chapter on Training for NOAA Fisheries developed courses and workshops.\nThere are many many online resources. These are some non-NMFS resources that NMFS staff have found particular helpful. These are a bit more specialized than “intro to R” or “intro to Python” materials. It leans towards resources for more specialized data-science tasks for fisheries.\n\nTraining materials for R\n\nR Consortium YouTube Channel many lectures on R topics.\nHappyGitwR\nGAMS in R\nData visualizations, mostly in R USGS GitHub org that has many examples of data visualizations.\nLots of environmental data examples in R Click on “PREVIOUS SESSIONS” to go to tutorials.\nUSGS R Training courses\nFishR Fisheries specific R resources\nOpenscapes Core Lessions Includes lessons on using GitHub and coding strategies. In R.\n\n\n\nTraining materials for Python\n\nVisualations and Dashboards in Python\nNASA EarthData webinars Many of these are Python examples and include links to the repos.\nAssessing NASA climate data in the cloud\n\n\n\nGeneral\n\nNOAA Center for AI Training and Resources",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "content/resources.html#other-open-science-efforts-in-government",
    "href": "content/resources.html#other-open-science-efforts-in-government",
    "title": "Resources",
    "section": "Other Open Science Efforts in Government",
    "text": "Other Open Science Efforts in Government\n\nNASA Transform to Open Science\nNASA Openscapes\nNASA EarthData\nUSGS R",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "content/resources.html#noaa-logos-and-style-guide",
    "href": "content/resources.html#noaa-logos-and-style-guide",
    "title": "Resources",
    "section": "NOAA logos and style guide",
    "text": "NOAA logos and style guide\nlogos: https://sites.google.com/noaa.gov/noaa-style-design-guide/noaa-emblem-and-logo#h.llpa9m7f9b4n\nstyle guide: NOAA styling how to guide https://sites.google.com/noaa.gov/noaa-style-design-guide/noaa-emblem-and-logo/how-to-guide",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "content/project_management/index.html",
    "href": "content/project_management/index.html",
    "title": "GitHub",
    "section": "",
    "text": "Here we gives some tips on working efficiently with GitHub.",
    "crumbs": [
      "Project Management"
    ]
  },
  {
    "objectID": "content/github/index.html",
    "href": "content/github/index.html",
    "title": "GitHub",
    "section": "",
    "text": "Are you at NOAA Fisheries? See the NMFS GitHub Guide for instructions and guidance on using GitHub and GitHub Enterprise at NOAA Fisheries.",
    "crumbs": [
      "GitHub"
    ]
  },
  {
    "objectID": "content/github/authenticating.html",
    "href": "content/github/authenticating.html",
    "title": "Authenticating and Installing",
    "section": "",
    "text": "Ask IT to install Git or GitHub Desktop. The later is more useful since you will get a good Git GUI and Git bundled together.",
    "crumbs": [
      "GitHub",
      "Authenticating and Installing"
    ]
  },
  {
    "objectID": "content/github/authenticating.html#installing-git",
    "href": "content/github/authenticating.html#installing-git",
    "title": "Authenticating and Installing",
    "section": "",
    "text": "Ask IT to install Git or GitHub Desktop. The later is more useful since you will get a good Git GUI and Git bundled together.",
    "crumbs": [
      "GitHub",
      "Authenticating and Installing"
    ]
  },
  {
    "objectID": "content/github/authenticating.html#authenticating",
    "href": "content/github/authenticating.html#authenticating",
    "title": "Authenticating and Installing",
    "section": "Authenticating",
    "text": "Authenticating\nYou need to authenticate in order to pull private repos and push to GitHub.\n\nGitHub Desktop\nNo tokens needed.\n\nSign in under GitHub Desktop &gt; Settings (or Options) &gt; Account.\nFill out your user info on GitHub Desktop &gt; Settings (or Options) &gt; Account.\nSign in at GitHub.com and ignore the GitHub Enterprise section, even if you use Enterprise Cloud. The Enterprise section if for signing into a Enterprise account on a private server.\n\nHelp! I signed up for GitHub Enterprise and GitHub Desktop will not authenticate!! Log out of GitHub Desktop under GitHub Desktop &gt; Settings (or Options) &gt; Account and log back in.\n\n\n\nVisual Studio Code (VSCode)\nNo tokens needed but you will need Git installed. https://code.visualstudio.com/docs/sourcecontrol/github\n\nInstall GitHub Pull Requests and Issues.\nClick on the GitHub icon in left nav bar and open a GitHub repo on your computer.\nClick on the GitHub icon (again) and sign into GitHub with your username and password.\n\n\n\nPositron\nSimilar to VSCode. You log into your GitHub account with your username and password. If you need to work with repos in GitHub Enterprise, there’s a “GitHub Enterprise URI” Setting in Positron. Put in your enterprise url, e.g. https://github.com/enterprises/noaa-nmfs/ to clone internal repos.\n\n\nGitKraken Desktop\nNo tokens needed. Log in with your GitHub account. https://help.gitkraken.com/gitkraken-desktop/github-gitkraken-desktop/\n\n\nRStudio\n\nGit and RStudio\nIn order for RStudio to use Git, it needs to know where your Git binary is installed. Instructions: https://happygitwithr.com/rstudio-see-git\nFind Git binary\n\nIn RStudio, Tools &gt; Terminal &gt; New Terminal\nAt the command line (in the new terminal), type which git if on a Mac and where git if in Windows.\n\nCopy that path. It probably doesn’t matter which one you use if there are multiple listed.\n\nTell RStudio the Git binary location\n\nIn RStudio, Tools &gt; Global Options &gt; Git/SVN\nThere is a box at top that asks for the location of the Git binary.\n\nPaste that path in.\n\n\n\nAuthenticating\nInstall the R package usethis. Then run this code.\n## set your user name and email:\nusethis::use_git_config(user.name = \"YourName\", user.email = \"your@mail.com\")\n\n## create a personal access token for authentication:\nusethis::create_github_token() \nThe typical scope that you want is repo and workflow (if you have GitHub Actions). Copy the token. It is really long. Copy that into YourPAT in code below.\n## set personal access token:\ncredentials::set_github_pat(\"YourPAT\")\nNote for Linux users: credentials::set_github_pat() might store your PAT in a memory cache that expires after 15 minutes or when the computer is rebooted. You thus may wish to do extend the cache timeout to match the PAT validity period: usethis::use_git_config(helper=\"cache --timeout=2600000\")\n\n\n\nConfigure your token for Enterprise\nIf you will be pushing and pulling from repos in GitHub Enterprise, you will need to Configure SSO. Click on the button next to the token and follow the instructions.\n\n\n\n\nIn terminal with a Personal Access Token\nIf you have authenticated with R following the instructions above, you do not need to authenticate again to use Git in the terminal. Conversely, if you authenticate in the terminal, you do not need to run the R code above.\n\nGo to https://github.com/settings/tokens\nClick generate new token.\nFor most uses, set the scope to “repo”. Definitely do not click all the scopes!\nCopy the token that it generates.\n\nOpen a terminal window and type\ngit config --global user.email \"&lt;your email&gt;\"\ngit config --global user.name \"&lt;your name&gt;\"\ngit config --global pull.rebase false\nNext in the terminal window type one of these\n\nUnix: git config --global credential.helper store\nMax: git config --global credential.helper osxkeychain\nWindows: git config –global credential.helper manager-core\n\nNow push a change to GitHub. It will ask for your username and password. For the password, end the token that you created.\n\n\nIn terminal with SSH\nInstead of a token, you can use SSH keys to authenticate. Search “github authentication with ssh” for instructions.",
    "crumbs": [
      "GitHub",
      "Authenticating and Installing"
    ]
  },
  {
    "objectID": "content/github/authenticating.html#more-help",
    "href": "content/github/authenticating.html#more-help",
    "title": "Authenticating and Installing",
    "section": "More help",
    "text": "More help\nHere are some notes from the NMFS GitHub Governance Team. Only accessible if you have a NOAA email.\n\nGeneral authentication notes from GGT debugging user problems.\nA training video on authentication.\nDebugging R package installs when the packages are on GitHub Enterprise.",
    "crumbs": [
      "GitHub",
      "Authenticating and Installing"
    ]
  },
  {
    "objectID": "content/github/actions.html",
    "href": "content/github/actions.html",
    "title": "GitHub Actions",
    "section": "",
    "text": "2021-12-07\n\nRepo with examples from 2021-12-07 R UG Meeting\nRecording of 2021-12-07 R UG Meeting\n\n2020-11\n\nPresentation by Corinne Bassin and Bai Li",
    "crumbs": [
      "GitHub",
      "GitHub Actions"
    ]
  },
  {
    "objectID": "content/github/actions.html#from-past-meetings",
    "href": "content/github/actions.html#from-past-meetings",
    "title": "GitHub Actions",
    "section": "",
    "text": "2021-12-07\n\nRepo with examples from 2021-12-07 R UG Meeting\nRecording of 2021-12-07 R UG Meeting\n\n2020-11\n\nPresentation by Corinne Bassin and Bai Li",
    "crumbs": [
      "GitHub",
      "GitHub Actions"
    ]
  },
  {
    "objectID": "content/github/actions.html#resources",
    "href": "content/github/actions.html#resources",
    "title": "GitHub Actions",
    "section": "Resources:",
    "text": "Resources:\n\nGeneral\n\nEli’s Zero-to-First GitHub Action in 10min Demo: https://github.com/nmfs-openscapes/12-07-21-GitHub-Actions\nGitHub Actions Quick Start: https://docs.github.com/en/actions\nExamples! https://github.com/r-lib/actions/tree/master/examples\nusethis R package: https://usethis.r-lib.org/reference/github_actions.html\nPresentation by Fisheries Integrated Toolbox (FIT): https://docs.google.com/presentation/d/1mT-OaDxA2Pjpz16GwcWHFDKDCWDxg-OOR0Zxm5nokxM/edit?usp=sharing\n\nUpdate R packages\n\nPkgdown/R-CMD check for stock SMART data.\nUpdate documentation (run devtools::document automatically and open a pull request with changes): https://github.com/nmfs-stock-synthesis/workflows/blob/main/.github/workflows/update-roxygen-docs.yml and to use: https://github.com/nmfs-stock-synthesis/workflows#how-do-i-use-these-workflows-in-my-r-package\n\nPull data for an R Shiny app\nPull data for an R Markdown Report\nTest R packages\nPerform security checks on…\nOther (tell us!)\n\nTrying to make reusable workflows with usethis style functions for people who want to add the workflows to their r package repo hopefully without the pain: https://github.com/nmfs-stock-synthesis/workflows#how-do-i-use-these-workflows-in-my-r-package\n\nEfforts that currently use GitHub Actions\n\nSean Rohan’s akgfmaps R package: https://github.com/sean-rohan-NOAA/akgfmaps\nnmfs-openscapes: https://github.com/nmfs-openscapes/Training\nAbigail Tyrell’s ESP data aggregation: https://github.com/NOAA-EDAB/esp_data_aggregation/blob/main/.github/workflows/render_indicator_reports_dev.yaml\nMegsie’s R package submission to the Journal of Open Source Software has a GitHub Action to rebuild a submission proof every time there’s a push: https://github.com/mcsiple/mmrefpoints",
    "crumbs": [
      "GitHub",
      "GitHub Actions"
    ]
  },
  {
    "objectID": "content/training.html",
    "href": "content/training.html",
    "title": "NMFS R Workshops",
    "section": "",
    "text": "Links to training resources developed with NOAA Fisheries",
    "crumbs": [
      "NMFS R Workshops"
    ]
  },
  {
    "objectID": "content/training.html#section",
    "href": "content/training.html#section",
    "title": "NMFS R Workshops",
    "section": "2022",
    "text": "2022\nNOAA CoastWatch: Assessing Satellite Data with R\nNWFSC RWorkflow Workshops 2022 8 week webinar on Git, GitHub, R packaging. All material and recorded lectures are online.\nPSAW III Workshops Workshops by NOAA Fisheries scientists on Git/GitHub, R packages, species distribution modeling, by-catch modeling, accessing remote-sensing data with R, open-source acoustics software",
    "crumbs": [
      "NMFS R Workshops"
    ]
  },
  {
    "objectID": "content/training.html#section-1",
    "href": "content/training.html#section-1",
    "title": "NMFS R Workshops",
    "section": "2021",
    "text": "2021\nFishR101 5 week R Workshop for AFSC Fisheries Researchers organized by Caitlin Allen Akselrud (@CaitlinAkselrud-NOAA), Emily Markowitz (@EmilyMarkowitz-NOAA)\nNWFSC RWorkflow Workshops 2021 8 week webinar on Git, GitHub, R packaging. All material and recorded lectures are online.\nR3 Train 8-week webinar training series on Reproducible Reporting with R for marine ecological indicators, sponsored by the Working Group on the Northwest Atlantic Regional Sea\nR for Management A 3-day R course developed by the West Coast Regional Office.\nIntro to spatial capture-recapture modeling A workshop on the oSCR R package from USGS, NOAA Fisheries and Univ of St Andrews.",
    "crumbs": [
      "NMFS R Workshops"
    ]
  },
  {
    "objectID": "content/training.html#section-2",
    "href": "content/training.html#section-2",
    "title": "NMFS R Workshops",
    "section": "2020",
    "text": "2020\n2020 R Workshop for Social Scientists workshop by NOAA Fisheries social scientists. Focus on data analysis and advanced topics.\nNWFSC RWorkflow Workshops 2020 Git, GitHub, R, R packages",
    "crumbs": [
      "NMFS R Workshops"
    ]
  },
  {
    "objectID": "content/templates.html",
    "href": "content/templates.html",
    "title": "Templates",
    "section": "",
    "text": "A number of groups have created templates that you can use.",
    "crumbs": [
      "Templates"
    ]
  },
  {
    "objectID": "content/templates.html#sandboxy-stuff",
    "href": "content/templates.html#sandboxy-stuff",
    "title": "Templates",
    "section": "Sandboxy stuff",
    "text": "Sandboxy stuff\n\nSuper simple website w R Markdown has a NOAA footer. Doesn’t have NMFS palette.",
    "crumbs": [
      "Templates"
    ]
  },
  {
    "objectID": "content/best_practices_coding/index.html",
    "href": "content/best_practices_coding/index.html",
    "title": "Best Practice - Coding",
    "section": "",
    "text": "A collection of best practice tips for different languages. See also the FIMS Developers Guide",
    "crumbs": [
      "Coding Best Practices"
    ]
  },
  {
    "objectID": "content/best_practices_coding/testing_and_review.html",
    "href": "content/best_practices_coding/testing_and_review.html",
    "title": "Testing and Review",
    "section": "",
    "text": "Fit: Code Testing\nhttps://github.com/benchmark-action/github-action-benchmark",
    "crumbs": [
      "Coding Best Practices",
      "Testing and Review"
    ]
  },
  {
    "objectID": "content/best_practices_coding/testing_and_review.html#code-testing",
    "href": "content/best_practices_coding/testing_and_review.html#code-testing",
    "title": "Testing and Review",
    "section": "",
    "text": "Fit: Code Testing\nhttps://github.com/benchmark-action/github-action-benchmark",
    "crumbs": [
      "Coding Best Practices",
      "Testing and Review"
    ]
  },
  {
    "objectID": "content/best_practices_coding/testing_and_review.html#code-review-and-validation",
    "href": "content/best_practices_coding/testing_and_review.html#code-review-and-validation",
    "title": "Testing and Review",
    "section": "Code Review and Validation",
    "text": "Code Review and Validation\nIf you are submitting software itself to a journal or generally for publishing, Office of Science and Technology (OST) requests a code review: once by a person you know who knows the technical details and is a code person, then another review by someone on the National Modeling team. Code review for analyses in publications is not required, but it is required if you are publishing the software itself (e.g., publishing a paper using the VAST package does not require code review; publishing the VAST package for general use does require code review). When doing internal code review, or passing code from one person to another, it is best to do paired code review. This can include: The existing or senior member on the project working through the code with the new or junior member. Two people code the same task and compare results (which should be the same). While one person is coding, another person runs chunks of that code and checks the results (also known as Driver-Navigator paired programming).\nHelper packages for reviews include {goodpractice} and {pkgreviewer}.\nFit: Code Review",
    "crumbs": [
      "Coding Best Practices",
      "Testing and Review"
    ]
  },
  {
    "objectID": "content/best_practices_coding/testing_and_review.html#backwards-compatibility",
    "href": "content/best_practices_coding/testing_and_review.html#backwards-compatibility",
    "title": "Testing and Review",
    "section": "Backwards Compatibility",
    "text": "Backwards Compatibility\nFit: backwards compatibility notes",
    "crumbs": [
      "Coding Best Practices",
      "Testing and Review"
    ]
  },
  {
    "objectID": "content/best_practices_coding/testing_and_review.html#attribution",
    "href": "content/best_practices_coding/testing_and_review.html#attribution",
    "title": "Testing and Review",
    "section": "Attribution",
    "text": "Attribution\nKathryn Doering, Megsie Siple, Cole Monnahan, and Bai Li contributed to this guide.",
    "crumbs": [
      "Coding Best Practices",
      "Testing and Review"
    ]
  },
  {
    "objectID": "content/documentation.html",
    "href": "content/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "FIT: Code Documentation\nFIMS Developers Guide",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "content/documentation.html#resources",
    "href": "content/documentation.html#resources",
    "title": "Documentation",
    "section": "",
    "text": "FIT: Code Documentation\nFIMS Developers Guide",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "content/documentation.html#tools",
    "href": "content/documentation.html#tools",
    "title": "Documentation",
    "section": "Tools",
    "text": "Tools\n\nReadme\nReadme.md is shown at the bottom of a GitHub repo and can be minimal or complex. Note, for an organization you should give some thought to standardizing the content of your Readme’s and including a disclaimer at the bottom. See the Fisheries Integrated Toolbox example.\n\nEPA CMAQ repo Links to documentation, DOIs, past releases, installation instructions for EPA’s CMAQ modeling system.\nCISA Sparrow repo\nUSGS PEST++\nHere is a Python example from USGS geomag-algorithms and groundmotion-processing\n[NPS acoustics])https://github.com/nationalparkservice/acoustic_discovery) example with lots of images.\n\n\n\nGitHub wiki\n\nEPA API tool, EPA useeior package.\nCollege scorecard\n\n\n\npkgdown\nIf you are preparing an R package, then the pkgdown R package is the way that people make websites directly from their R package documentation. The Fisheries Integrated Toolbox has a NMFS branded pkgdown template that you can use. It’ll add all the NOAA Fisheries branding and colors. pkgdown Template. There are many examples of pkgdown sites on GitHub. The key file to change is pkgdown/_pkgdown.yml and I find it easiest to poke around GitHub and find version of that file to copy and modify.\n\n\nbookdown\nbookdown is also very popular for making documentation and RStudio makes it easy to build books. Here is an example of one of my bookdown books. Here is a bookdown lab manual written by one of the first Openscapes cohort teams as their team project: Fay Lab Manual. A bookdown book is just a collection of Rmarkdown files. You write those and bookdown makes it into the online book, which you can put on GitHub Pages.\n\n\nOther\nAnother common way to include documentation is a folder with the documentation (in whatever format you want) with links to that from the Readme file or GitHub Pages.\n\nEPA CMAQ repo has a folder called DOCS in the repo which holds documentation in markdown format, .md. The Readme points to those files and because they are markdown, you see them as formatted (not raw) text.\nUSGS shakemap created a webpage which is kept in the docs folder. GitHub Pages then points to that folder.\nSphinx documentation is used by Python users and is a bit like bookdown in appearance but uses a different markup language (rst). Here are examples from USGS geobipy and gmprocess. The html output is put in the docs folder and GitHub Pages is pointed to that.\nQuarto documentation allows both Jupyter and Rmd files. NASA Openscapes is using this for their hackathon documentation.",
    "crumbs": [
      "Documentation"
    ]
  },
  {
    "objectID": "content/welcome.html",
    "href": "content/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "This is an online reference resource by the NMFS Open Science community. It includes a wide variety of loosely curated information from different community members. It is place to document institutional knowledge and provide references to available resources. The focus is of this resource book is federal governmental agencies, and NOAA Fisheries specifically.\nIf you have suggestions for additions or changes, please make a pull request.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "content/welcome.html#our-origins",
    "href": "content/welcome.html#our-origins",
    "title": "Welcome",
    "section": "Our origins",
    "text": "Our origins\nNOAA Fisheries scientists have been involved in Open Science and production of Open Source packages for many years, really from the beginning of “open source”. However, the effort towards agency-wide training in Open Science aligns with the transition to Open Science workflows and tools that is occurring across science and across scientific organizations.\n\nThe contents for this book was first developed as a wiki during a fall 2021 NMFS Openscapes Champions cohort. The first wiki merged content developed by Eli Holmes (NWFSC) and Emily Markowitz (AFSC). Each had independently developed this material for their workshops on R. NMFS Openscapes was another project that emerged from the fall 2021 Openscapes Champions cohort, spearheaded by Eli Holmes (NWFSC) and inspired by NASA Openscapes.\nThe wiki next migrated to the NMFS Openscapes GitHub org and new material was added from the Fisheries Integrated Toolbox resources (Kathryn Doering, Bai Li and others) and from the Best AFSC RACE-GAP Coding Practices Guidelines (compiled by Caitlin Allen Akselrud, Emily Markowitz, and others). In fall 2022, the NMFS Open Science GitHub organization was launched as an unbrella organization to support Open Science efforts within the agency. The wiki migrated here and transitioned to a Quarto website with the help of Openscapes and Julie Lowndes tutorials.\nWe are extremely grateful to and acknowledge Openscapes and Julia Stewart Lowndes’ role in helping this resource book come into being along with its parent organization NMFS Open Science.",
    "crumbs": [
      "Welcome"
    ]
  }
]